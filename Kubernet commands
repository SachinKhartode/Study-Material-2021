Go to command prompt

Version Check:
kubectl version --short --client

Update kubernetes dashboard with latest deployment packages
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml

Run kubernetes dashboard
kubectl proxy

Kubernetes Dashboard Link
http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/


in new command prompt
for first time (if not worked )
az login --tenant a14555b0-886c-49fa-a476-228df6a1486d (tenant id / subscribtionid)

az acr login --name acrname
az acr login --name acrname


az login --use-device-code

--------------------------------------------------------------------

docker tag imagename:latest azurecontainerregistory/imagename:tagName
docker push azurecontainerregistory/imagename:tagName


-------------------------------------------------------
create new namespace:
kubectl create namespace namespaceName

create ingress rules for all services
kubectl apply -f ingressyamlfilepath\ingress-deployment.yaml --namespace namespaceName

create/apply ingress resources service yaml
kubectl apply -f serviceyamlfilepath\abc_api_service_deploy.yaml --namespace namespaceName

-------------------------------------------------------
Sample Yaml file to create new service:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: MyTestService-deployment  
spec:
  replicas: 1
  selector:
    matchLabels:
      app: MyTestService-release1
  template:
    metadata:
      labels:
        app: MyTestService-release1
    spec:
      containers:
      - name: MyTestService-release1
        image: AzureContainerRegistoryName/MyTestService:release1_v0.1
        ports:
        - containerPort: 80
        env:
        - name: ASPNETCORE_URLS
          value: http://+:80
---
apiVersion: v1
kind: Service
metadata:
  name: MyTestService-release1
spec:
  type: ClusterIP
  ports:
  - port: 80
  selector:
    app: MyTestService-release1


-------------------------------------------------------
Sample Ingress rules deployment:


apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: appname-webapi-ingress-deployment
  namespace: release1
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS, DELETE"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,X-LANG,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,X-Api-Key,X-Device-Id,Access-Control-Allow-Origin,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "*, X-CustomResponseHeader"
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: myservice-api-release1
          servicePort: 80
        path: /myservice(/|$)(.*)
      - backend:
          serviceName: myservice-api-release1
          servicePort: 80
        path: /myservice(/|$)(.*)
      - backend:
          serviceName: myservice-api-release1
          servicePort: 80
        path: /myservice(/|$)(.*)
     

Link:
https://kubernetes.io/docs/concepts/services-networking/ingress/




