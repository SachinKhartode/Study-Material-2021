1. Delegate vs Event
An Event declaration adds a layer of abstraction and protection on the delegate instance. 
This protection prevents clients of the delegate from resetting the delegate and 
its invocation list and only allows adding or removing targets from the invocation list.

Explanation:
Delegates support ‘=’ assignment operator, events do not.
If you write your system with just delegate, the consumer may use ‘=’ operator to attach method without error. 
In case when the event is subscribed by many components or clients, they will use ‘+=’ to support many methods. 
Suppose, someone forgets to use ‘+=’ and uses ‘=’, he will unknowingly detach all attached methods and attach only his method. 
This will be a big mess as other components will never receive event notification.

2. Static class vs Singleton
Instantiation: Static classes cannot be instantiated, whereas singletons are instantiated but restrict the creation of additional instances.
Access: Static class members are accessed directly using the class name, while singleton instances are accessed through a specific method or property.
Inheritance: Static classes cannot be inherited or overridden, while singletons can be extended by subclasses and implement interfaces.
State: Static classes do not maintain a state, whereas singletons can have state. However, it is important to be cautious with mutable state in singletons, as it can lead to potential concurrency issues.
Flexibility: Singletons offer more flexibility due to their ability to implement interfaces and be extended, while static classes are limited to containing static members only.

3. Ref vs Out
I. The parameter or argument must be initialized first before it is passed to ref.	
It is not compulsory to initialize a parameter or argument before it is passed to an out.

II. It is not compulsory to initialize a parameter value before using it in a calling method.	
A parameter value must be initialized within the calling method before its use.

III. Passing a parameter value by Ref is useful when the called method is also needed to modify the pass parameter.	
Declaring a parameter to an out method is useful when multiple values need to be returned from a function or method.

IV. When we use REF, data can be passed bi-directionally.	
When we use OUT data is passed only in a unidirectional way (from the inner method to the outer method).

4. String vs String Builder
The string class in C# is immutable, meaning its value cannot be changed once it is created. 
Every time you modify a string, a new instance is created in memory, which can lead to performance issues when dealing with large or frequently modified strings. 
However, the string class offers several convenient methods for string manipulation, such as concatenation, splitting, and replacing.

The StringBuilder class, on the other hand, is mutable, which means you can modify its value without creating a new instance each time. 
It provides efficient string manipulation by reducing memory allocation and reallocation.

5. Thread vs Task
Tasks in .NET:
Tasks, introduced in the Task Parallel Library (TPL), provide an abstraction for asynchronous operations. 
They represent units of work that can be executed concurrently and allow for efficient utilization of system resources. 
Tasks rely on thread pool threads, which are managed by the runtime, making them lightweight and scalable.

Threads in .NET:
Threads are the fundamental units of execution in a program. 
They allow for concurrent execution of code and can run in parallel on multiple CPU cores. 
Threads have a direct association with operating system threads and require explicit management by the developer.

Differences:
- Abstraction Level: Tasks provide a higher-level abstraction, allowing developers to focus on the work being performed rather than lowe level thread management.
- Resource Utilization: Tasks leverage thread pool threads, which are more efficient in terms of resource allocation and can be dynamically assigned based on the system's load.
- Synchronization: Tasks inherently support synchronization mechanisms like `await` and `ContinueWith` for coordination and handling of dependencies and chain of tasks.
- Flexibility: Threads provide more control and flexibility, allowing direct manipulation of thread priorities, thread-local storage, and explicit thread management.

5. WhenAll vs WaitAll
In case of WhenAll method task execution don't block other tasks. 
But in WaitAll method task blocks and execute all task sequentially. 

WhenAll is parallel means asynchronous execution of all tasks. 
WaitAll is synchronous execution

6. Concarant vs Parallel
Concurrency is a condition that exists when at least two tasks can start, run, and complete in overlapping time periods. 
It doesn't necessarily mean that they will ever both be running at the same instant.
Eg. 
Using the async and await keywords to write asynchronous code that can run in the background without blocking the main thread.
Using the Task class and the Task Parallel Library (TPL) to create and manage multiple tasks that can run concurrently on different threads.

Parallelism is a condition that arises when at least two tasks are executing simultaneously. 
It means that they are literally running at the same time, 
Eg. 
Using the Parallel class and its methods, such as Parallel.ForEach and Parallel.For, to execute loops in parallel on multiple threads.


7. == vs Equales
The == Operator compares the reference identity while the Equals() method compares only contents. 

8. Array vs ArrayList
An Array is strongly-typed. We can store only the same type of data.	
ArrayList is a non-generic collection type. ArrayList's internal Array is of the object type. So, we can store multiple types of data in ArrayList.

Array stores a fixed number of elements.	
ArrayList is dynamic in term of capacity. 
If the number of element exceeds, ArrayList will increase to double its current size.

Array provides better performance than ArrayList.	
If we are using a large number of ArrayList then it degrades performance because of boxing and unboxing.

Array belongs to namespace System	
ArrayList belongs to namespace System.Collection

The Array cannot accept null.	
An ArrayList can accept null.

Example:
string[] array1=new string[5];
array1[0]=”Hello”;
array1[1]=”Bye”;	

ArrayList a1=new ArryList();
a1.add(null);
a1.insert(1,”hi”);
a1.add(3);
a1.add(8.23);

9. Encapsulation vs Interface (Abstraction) 
Abstraction solves the problem in the design level.
Encapsulation solves the problem in the implementation level.

Encapsulation can be implemented with different levels of access to object data. 
Example, private method cannot be visible to out side of class. 
Abstraction allows making relevant information visible outside

Encapsulation is data hiding(information hiding) while 
Abstraction is detail hiding(implementation hiding). 

Abstraction is outer layout in terms of design.
Encapsulation is inner layout in terms of implementation. 

10. Collection vs Generic
Collections are made to more effectively organize, store, and modify comparable data.
Collection support List, Stack, Hashtable, queue etc. 
Collection has two types: 
Generic collection like List
Non Generic collection like ArrayList

Generics enable the use of stronger type-checking, the elimination of casts, 
and the ability to develop generic algorithms like searching, sorting, comparing etc. 

11. Struct vs Class

12. Filter vs Middleware

13. Property vs Variable

14. Throw vs Throw ex
The difference between “throw” and “throw ex” is that “throw” preserves the stack trace. 
(the stack trace will point to the method that caused the exception in the first place)

while ”throw ex” does not preserve the stack trace. 
(we will lose the information about the method that caused the exception in the first place. It will seem like the exception was thrown from the place of its catching and re-throwing).

15. Real-time example of when to use abstract class and interfere

16. shallow copy vs deep copy
Both are used to duplicating objects. 
Shallow copy copy all the member references variables to an another object. 
That mean changes made in original object will reflect into copied one as well. 
because newly coppied object also refer to same memory location. 

Deep copy copy everything from original object in to new object and 
memory reference will different for both of them. 

17. Use of asynchronous programming

18. Thread polling

19. 

20. Async method vs method

21. Deadlock in thread

22. Thread states

23. covariance vs contravariance

24. association vs aggregation

25. stack vs heap

26. How to use abstraction in c#

27. What is Garbage collection
The garbage collector (GC) serves as an automatic memory manager. 
The garbage collector manages the allocation and release of memory for an application. 
Therefore, developers don't have to write code to perform memory management tasks. 
Automatic memory management can eliminate common problems such as forgetting to free an object and causing a memory leak or attempting to access freed memory for an object that's already been freed.

When an object is created then it will allocate the memory in the heap then garbage collection checks the available space for the newly created objects,
if the available space is not adequate to allot the space then it automatically garbage collect the unused objects. 
If all are valid referenced objects then it gets additional space from the processor.

28. What are the generations in Garbage collection. 
Generation 0 identifies a newly created object that has never been marked for collection
Generation 1 identifies an object that has survived a GC (marked for collection but not removed because there was sufficient heap space)
Generation 2 identifies an object that has survived more than one sweep of the GC.

29. Managed vs Unmanaged code
In Managed Code, memory is automatically allocated and released by the CLR. 
This means that developers do not need to worry about Memory Management issues such as memory leaks or null pointer errors. 
In Unmanaged Code, Memory Management is the responsibility of the developer.

30. How to dispose or handle unmanaged code in c#
I. Use Dispose method of IDisposable interface
public void Dispose()
{
    // Dispose of unmanaged resources.
    Dispose(true);
    // call Suppress finalization, It will prevent GC to call finalizer. 
    GC.SuppressFinalize(this);
}
II. Use Using statement for database connection, network connection, file handling etc. 

31. Destructor vs Finalizer
Destructors are explicitly defined and called by the programmer or the compiler, 
while finalizers are implicitly defined and called by the GC.


